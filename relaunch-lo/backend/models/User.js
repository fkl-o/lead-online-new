import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

const userSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Name ist erforderlich'],
    trim: true,
    maxlength: [50, 'Name darf nicht länger als 50 Zeichen sein']
  },
  email: {
    type: String,
    required: [true, 'E-Mail ist erforderlich'],
    unique: true,
    lowercase: true,
    trim: true,
    match: [
      /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/,
      'Bitte geben Sie eine gültige E-Mail-Adresse ein'
    ]
  },
  password: {
    type: String,
    required: function() {
      return !this.isAutoGenerated;
    },
    minlength: [6, 'Passwort muss mindestens 6 Zeichen lang sein'],
    select: false
  },
  role: {
    type: String,
    enum: ['user', 'admin', 'lead'],
    default: 'lead'
  },
  isActive: {
    type: Boolean,
    default: true
  },
  isAutoGenerated: {
    type: Boolean,
    default: false
  },
  lastLogin: {
    type: Date
  },
  passwordResetToken: String,
  passwordResetExpires: Date,
  emailVerificationToken: String,
  emailVerified: {
    type: Boolean,
    default: false
  },
  profile: {
    company: String,
    phone: String,
    website: String,
    address: {
      street: String,
      city: String,
      postalCode: String,
      country: {
        type: String,
        default: 'Deutschland'
      }
    }
  },
  preferences: {
    emailNotifications: {
      type: Boolean,
      default: true
    },
    language: {
      type: String,
      default: 'de'
    }
  }
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});

// Indexes
userSchema.index({ email: 1 });
userSchema.index({ role: 1 });
userSchema.index({ isActive: 1 });
userSchema.index({ createdAt: -1 });

// Virtual for user's leads
userSchema.virtual('leads', {
  ref: 'Lead',
  localField: '_id',
  foreignField: 'user',
  justOne: false
});

// Pre-save middleware to hash password
userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  
  if (this.password) {
    this.password = await bcrypt.hash(this.password, 12);
  }
  next();
});

// Method to check password
userSchema.methods.matchPassword = async function(enteredPassword) {
  if (!this.password) return false;
  return await bcrypt.compare(enteredPassword, this.password);
};

// Method to generate JWT
userSchema.methods.getSignedJwtToken = function() {
  return jwt.sign(
    { 
      id: this._id,
      email: this.email,
      role: this.role
    }, 
    process.env.JWT_SECRET, 
    {
      expiresIn: process.env.JWT_EXPIRE
    }
  );
};

// Method to generate reset password token
userSchema.methods.getResetPasswordToken = function() {
  // Generate random token
  const resetToken = Math.random().toString(36).substring(2, 15) + 
                    Math.random().toString(36).substring(2, 15);
  
  // Hash token and set to resetPasswordToken field
  this.passwordResetToken = resetToken;
  
  // Set expire
  this.passwordResetExpires = Date.now() + 10 * 60 * 1000; // 10 minutes
  
  return resetToken;
};

// Static method to create lead user
userSchema.statics.createLeadUser = async function(leadData) {
  const existingUser = await this.findOne({ email: leadData.email });
  
  if (existingUser) {
    return existingUser;
  }
  
  const userData = {
    name: leadData.name,
    email: leadData.email,
    role: 'lead',
    isAutoGenerated: true,
    isActive: true,
    profile: {
      company: leadData.company || '',
      website: leadData.website || ''
    }
  };
  
  const user = await this.create(userData);
  return user;
};

const User = mongoose.model('User', userSchema);

export default User;
